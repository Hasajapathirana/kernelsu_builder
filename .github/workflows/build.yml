name: Building Kernel-SU

on:
  workflow_dispatch:

env:
  MANIFEST: https://android.googlesource.com/kernel/manifest
  DEVICE: p3s
  DT_LINK: https://github.com/Exynos2100-common/android_kernel_samsung_universal2100.git
  DT_PATH: kernel/samsung/universal2100-common
  TZ: Europe/London

jobs:
  build:
    runs-on: ubuntu-20.04
    

    steps:
       - name: Checkout
         uses: actions/checkout@master
         

       - name: remove pkg and setting repo
         run: |
            sudo apt update && sudo apt install git
            git clone https://github.com/SA-17/rm_pkg pkg && cd pkg && bash setup.sh
            cd .. && sudo -E apt-get -qq update
            sudo -E apt-get -qq install bc build-essential tar zip curl libstdc++6 git wget python3 gcc clang libssl-dev rsync flex curl  bison aria2
            sudo rm -rf /opt/*
            sudo apt update
            sudo curl --create-dirs -L -o /usr/local/bin/repo -O -L https://storage.googleapis.com/git-repo-downloads/repo
            sudo chmod a+rx /usr/local/bin/repo
            sudo apt install zip
  
       - name: Sync recovery source and device tree and build
         run: |
             mkdir work
             cd work
             sudo su
             repo init -u $MANIFEST --depth=1
             repo sync -c  -j700 --force-sync --no-clone-bundle --no-tags
             git clone $DT_LINK --depth=1 --single-branch $DT_PATH
            

       - name: Adding Support to kernel su supported and building
         run: |
             cd work 
             echo "Adding KernelSU"
             cd $DT_PATH 
             curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
             echo "Finished Adding KernelSU"
             cd $out
             cd work
             git clone https://github.com/kdrag0n/proton-clang.git --depth=1
             export PATH="$HOME/toolchains/proton-clang/bin:$PATH"
             clang -v

       - name: installing it
         run: |
          sudo apt update
          sudo apt install tightvncserver -y

       - name: Start VNC Server
         run: |
          # Set the password for VNC (You may need to adjust this for your setup)
          echo "yourpassword" | vncpasswd -f > /home/runner/.vnc/passwd
          chmod 600 /home/runner/.vnc/passwd
          
          # Start VNC server with a specific resolution
          vncserver :1 -geometry 1920x1080 -depth 24
          
       - name: Display VNC Connection Info
         run: |
          echo "VNC server started. You can connect using the following IP address:"
          curl -s ifconfig.me
          echo ":1 (display number)"

          - name: Keep VNC Server Running for 1 Hour
          run: |
          echo "VNC server will remain active for 1 hour."
          sleep 3600  # Keep the runner alive for 1 hour (3600 seconds)
